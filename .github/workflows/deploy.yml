name: Deploy Secure Bedrock Chatbot

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: streamlit-bedrock-chatbot
  ECS_SERVICE: bedrock-chatbot-service
  ECS_CLUSTER: bedrock-ecs-cluster

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Plan
      working-directory: ./terraform
      run: terraform plan -no-color
      continue-on-error: true

    - name: Terraform Apply
      working-directory: ./terraform
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: terraform apply -auto-approve

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Update ECS service
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --force-new-deployment \
          --region $AWS_REGION

    - name: Wait for deployment
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --region $AWS_REGION

    - name: Get Application URL
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      working-directory: ./terraform
      run: |
        echo "Application URL: $(terraform output -raw application_url)"
        echo "Cognito User Pool ID: $(terraform output -raw cognito_user_pool_id)"
