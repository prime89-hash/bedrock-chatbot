name: Build and Deploy Bedrock

on:
  push:
    branches:
      - main
  
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Set to true to destroy the infrastructure'
        required: false
        default: 'false'
        type: boolean

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: streamlit-bedrock-chatbot

jobs:
  deploy:
    runs-on: [ubuntu-latest]
    if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.destroy != 'true') }}

    permissions:
       contents: read
       id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials Using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Test AWS Credentials
        run: aws sts get-caller-identity

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
            terraform_version: 1.5.7 

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
      
      - name: Terraform Apply (create base infra)
        working-directory: ./terraform
        run: terraform apply -auto-approve  

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          IMAGE_URI="${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}"
          echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_ENV
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
        
          echo "::set-output name=image_tag::${IMAGE_TAG}"
      
      - name: Terraform Apply (deploy app)
        working-directory: ./terraform
        env:
          TF_VAR_image_tag: ${{ steps.build-image.outputs.image_tag }}
        run: terraform apply -auto-approve

      - name: Get Application URL and Credentials
        working-directory: ./terraform
        run: |
          echo "üåê Application URL: $(terraform output -raw application_url)"
          echo "üîê Cognito Domain: $(terraform output -raw cognito_domain)"
          echo "üë§ Create User Command:"
          echo "$(terraform output -raw user_creation_command)"
          echo ""
          echo "‚úÖ Deployment completed successfully!"

      - name: Create Default Admin User
        working-directory: ./terraform
        run: |
          USER_POOL_ID=$(terraform output -raw cognito_user_pool_id)
          
          # Use strong password from secrets or generate one
          ADMIN_PASSWORD="${{ secrets.ADMIN_PASSWORD || 'SecureAdmin2025!@#' }}"
          
          # Check if user already exists
          if aws cognito-idp admin-get-user --user-pool-id $USER_POOL_ID --username admin --region ${{ env.AWS_REGION }} 2>/dev/null; then
            echo "üë§ User 'admin' already exists"
          else
            echo "üë§ Creating default admin user..."
            
            # Create user
            aws cognito-idp admin-create-user \
              --user-pool-id $USER_POOL_ID \
              --username admin \
              --user-attributes Name=email,Value=admin@example.com Name=email_verified,Value=true \
              --message-action SUPPRESS \
              --region ${{ env.AWS_REGION }}
            
            # Set permanent password
            aws cognito-idp admin-set-user-password \
              --user-pool-id $USER_POOL_ID \
              --username admin \
              --password "$ADMIN_PASSWORD" \
              --permanent \
              --region ${{ env.AWS_REGION }}
            
            # Confirm user
            aws cognito-idp admin-confirm-sign-up \
              --user-pool-id $USER_POOL_ID \
              --username admin \
              --region ${{ env.AWS_REGION }}
            
            echo "‚úÖ Default user created with secure password"
            echo "üîë Password stored in GitHub Secrets or using default strong password"
          fi

  destroy:
    runs-on: [ubuntu-latest]
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.destroy == 'true' }}

    permissions:
       contents: read
       id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials Using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
            terraform_version: 1.5.7 

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Destroy
        working-directory: ./terraform
        run: terraform destroy -auto-approve

      - name: Destroy Complete
        run: |
          echo "üóëÔ∏è Infrastructure destroyed successfully!"
          echo "All AWS resources have been removed."