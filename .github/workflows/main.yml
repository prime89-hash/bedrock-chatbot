name: Build and Deploy Bedrock

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: streamlit-bedrock-chatbot

jobs:
  deploy:
    runs-on: [ubuntu-latest]

    permissions:
       contents: read
       id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials Using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Test AWS Credentials
        run: aws sts get-caller-identity

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
            terraform_version: 1.5.7 

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
      
      - name: Terraform Apply (create base infra)
        working-directory: ./terraform
        run: terraform apply -auto-approve  
      

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          IMAGE_URI="${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}"
          echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_ENV
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
        
          echo "::set-output name=image_tag::${IMAGE_TAG}"
      
      - name: Terraform Apply (deploy app)
        working-directory: ./terraform
        env:
          TF_VAR_image_tag: ${{ steps.build-image.outputs.image_tag }}
        run: terraform apply -auto-approve